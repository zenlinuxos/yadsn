#!/bin/sh

# Copyright (C) 2020 David Alfonso
#
# This file is part of yadsn.
#
# yadsn is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# yadsn is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with yadsn.  If not, see <https://www.gnu.org/licenses/>.

# NOTE: assert_output uses multiple lines to avoid subshell last newline
# 	trimming

. lib/globals.sh

sn="$(dirname "$(dirname "$0")")/yadsn"

setup() {
	mkdir -p "$ts_test_dir"
	export YADSN_DATA="$ts_test_dir/data"
}

teardown() {
	rm -r "$ts_test_dir"
}

error() {
	echo "Error: $1"
	exit 1
}

create_remote() {
	network="$1"
	network_url="$ts_test_dir/$network"
	( mkdir -p "$network_url" ; cd "$network_url" || exit ; git init --bare; )
}

check_remote_has_changes() {
	network="$1"
	network_url="$ts_test_dir/$network"
	( cd "$network_url" || exit ; git log --oneline | grep "joined" )
}

###########
# sn join #
###########

test_join() {
	create_remote "remote-network"
	$sn join "$network_url"
	assert_status 0 $?
	[ -d "$YADSN_DATA/$network/.git" ] || error "Git repository not initialized"
	$sn members | grep "$USER"
}

test_join_default_user() {
	create_remote "remote-network"
	$sn join "$network_url"
	grep "remote-network_username=$USER" "$(config_file)"
}

test_join_extracts_network_name_from_url() {
	create_remote "remotes/subdir/test.git"
	$sn join "$network_url" | assert_output "\
Joined network 'test' as user '""$USER""'.
"
}

test_join_fail_no_args() {
	$sn join 2>&1 | grep "Error: Missing required Git URL"
}

test_join_fail_invalid_url() {
	$sn join invalid_url network 2>&1 \
		| grep "Error: Cloning remote Git repository"
}

test_join_fail_too_many_parameters() {
	$sn join url network toomany 2>&1 \
		| grep "Error: Too many arguments"
}

test_join_fail_existing_local() {
	$sn create test-network
	$sn join "$ts_test_dir/nonexisting.git" test-network
	assert_status 1 $?
}

###########
# sn push #
###########

test_push() {
	create_remote "remote-network"
	# this automatically adds our user to the network
	$sn join "$network_url"
	$sn post test message
	$sn push
	check_remote_has_changes "remote-network"
}

test_push_updated_remote() {
	create_remote "remote-network"
	$sn -u user1 join "$network_url" remote1 || error "join1"
	$sn -u user2 join "$network_url" remote2 || error "join2"
	$sn -n remote1 push || error "post"
	$sn -n remote2 post other message || error "post"
	$sn -n remote2 push 2>&1 | head -1 | assert_output "\
Error: Can't push local changes, try 'pull' first
"
}

###########
# sn push #
###########

test_pull() {
	create_remote "remote-network"
	$sn join "$network_url" remote1 || error "join1"
	$sn join "$network_url" remote2 || error "join2"
	$sn -n remote1 post test message || error "post1"
	$sn -n remote1 push || error "push1"
	$sn -n remote2 pull || error "pull2"
	$sn -n remote2 log | grep "test message"
}

###############
# sn networks #
###############

test_networks_local() {
	$sn create my-network || error "create"
	$sn networks | assert_output "\
my-network [1 user] [no messages] [no remote] (default)
"
}

test_networks_local_default() {
	$sn create my-network || error "create"
	$sn create my-other-network || error "create"
	$sn networks | assert_output "\
my-other-network [1 user] [no messages] [no remote]
my-network [1 user] [no messages] [no remote]
"
	echo "default_network=my-other-network" >> "$(config_file)"
	$sn networks | assert_output "\
my-other-network [1 user] [no messages] [no remote] (default)
my-network [1 user] [no messages] [no remote]
"
}

test_networks_local_posts() {
	$sn create my-network || error "create"
	$sn post one message || error "post1"
	$sn networks | assert_output "\
my-network [1 user] [1 message] [no remote] (default)
"
	$sn post another message || error "post2"
	$sn networks | assert_output "\
my-network [1 user] [2 messages] [no remote] (default)
"
}

test_networks_remote() {
	create_remote "remote-network"
	$sn join "$network_url" my-remote || error "join"
	$sn networks | assert_output "\
my-remote [1 user] [no messages] [$network_url] (default)
"
}


export TS_COLOR="true"
#export TS_DEBUG="true"

. tests/ts
