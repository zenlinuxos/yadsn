#!/bin/sh

# Copyright (C) 2020 David Alfonso
#
# This file is part of yadsn.
#
# yadsn is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# yadsn is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with yadsn.  If not, see <https://www.gnu.org/licenses/>.

# NOTE: assert_output uses multiple lines to avoid subshell last newline
# 	trimming

sn="$(dirname "$(dirname "$0")")/yadsn"

#shellcheck source=yadsn
. "$sn"

# see https://github.com/thinkerbot/ts/pull/24
set +u

setup() {
	mkdir -p "$ts_test_dir"
	export YADSN_DATA="$ts_test_dir"
}

teardown() {
	rm -r "$ts_test_dir"
}

error() {
	echo "Error: $1"
	exit 1
}

test_no_command_shows_usage() {
	$sn | assert_output "\
$($sn -h)
"
}

test_invalid_command() {
	$sn invalid-command 2>&1 | head -1 | assert_output "\
Error: Invalid command
"
}

#############
# sn create #
#############

test_create() {
	network="test-network"
	$sn create "$network"
	assert_status 0 $?
	[ -d "$YADSN_DATA/$network/.git" ] || error "Git repository not initialized"
}

test_create_too_many_parameters() {
	$sn create test network 2>&1 | head -1 | assert_output "\
Error: Invalid number of arguments
"
}

test_create_duplicate() {
	$sn create test-network
	assert_status 0 $?
	$sn create test-network 2>&1 | head -1 | assert_output "\
Error: A network named 'test-network' already exists
"
}

test_create_default_username_in_config() {
	test_create
	assert_status 0 $?
	assert_output "\
test-network_username=$USER
" < "$YADSN_DATA/config"
}

test_create_default_username_in_repository() {
	test_create
	assert_status 0 $?
	test -e "$YADSN_DATA/$network/$USER"
	assert_status 0 $?
}

##############
# sn members #
##############

test_members() {
	# A default user is created when running the create command (+1)
	test_create
	for i in $(seq 0 9); do
		$sn -u "user$i" post "Test message from user$i"
	done
	$sn members | wc -l | assert_output "\
11
"
}

test_members_format() {
	test_create
	$sn members | assert_output "\
@$USER
"
}

###########
# sn post #
###########

test_post() {
	test_create
	message="post this is a very long message in the same line"
	$sn -n "$network" post "$message"
	assert_status 0 $?
	grep -r "$message" "$YADSN_DATA/$network"
	assert_status 0 $?
	cd "$YADSN_DATA/$network" || exit 1
	git log | grep -q "User.*added"
	assert_status 0 $?
}

test_post_empty_message() {
	test_create
	# To avoid hanging stdout and stdin must be redirected to /dev/null
	$sn post >/dev/null 2>&1 &
	# It's not enough to run 'sn post' because then, an editor is shown to the
	# user for entering the message. We use the pid of the sn command, in order
	# to kill the vim process that will be run.
	# We have to sleep in order to give the vim process time to start.
	sleep 1
	kill -9 "$(ps -Af | awk "{if (\$3 == $!) print \$2}")"
	assert_status 0 $?
	wc -l "$YADSN_DATA/$network/$USER/$(posts_file)" | cut -f1 -d' ' | assert_output "\
0
"
}

test_post_default_network() {
	test_create
	message="post this is a very long message in the same line"
	$sn post "$message" | grep "$network"
	assert_status 0 $?
	grep -r "$message" "$YADSN_DATA/$network/$USER"
	assert_status 0 $?
}

test_post_invalid_default_network() {
	test_create
	$sn -n invalid post test message 2>&1 | head -1 | assert_output "\
Error: Unable to change into network directory
"
	echo "default_network=invalid" >> "$(config_file)"
	$sn post test message 2>&1 | head -1 | assert_output "\
Error: Unable to change into network directory
"
}

##########
# sn log #
##########

test_log_empty_network() {
	test_create
	$sn log | wc -l | assert_output "\
0
"
}

test_log_one_user() {
	test_create
	for i in $(seq 0 9); do
		$sn post "Test message num $i"
	done
	$sn log | wc -l | assert_output "\
10
"
}

test_log_multiple_users() {
	test_create
	for i in $(seq 0 4); do
		$sn -u david post "Message $i from david"
		$sn -u peter post "Message $i from peter"
	done
	$sn log | wc -l | assert_output "\
10
"
}

test_log_multiple_users_ordered() {
	test_create
	export SN_TEST_NOW
	SN_TEST_NOW=$(date +%s)
	for i in $(seq 0 1); do
		$sn -u david post "Message $i from david"
		SN_TEST_NOW=$((SN_TEST_NOW + 1))
		$sn -u peter post "Message $i from peter"
		SN_TEST_NOW=$((SN_TEST_NOW + 1))
	done
	# shellcheck disable=2126
	$sn log | sed -n '2p;4p' | grep david | wc -l | assert_output "\
2
"
	# shellcheck disable=2126
	$sn log | sed -n '1p;3p' | grep peter | wc -l | assert_output "\
2
"
}

test_log_multiline_messages() {
	test_create
	$sn post "Multiline
message"
	$sn log | grep "Multiline\.\.\."
	assert_status 0 $?
}

test_log_quoted_messages() {
	test_create
	$sn post "Message \"with\" some \"quotes\""
	$sn log | grep "Message \"with\" some \"quotes\""
	assert_status 0 $?
}

test_log_default_time_format() {
	test_create
	$sn post "example text"
	$sn log | grep "^\[$(date +'%b %d %R') |"
}

test_log_time_format() {
	test_create
	$sn post "example text"
	echo "default_time_format=%Y" >> "$(config_file)"
	$sn log | grep "^\[$(date +%Y) |"
}

###########
# sn show #
###########

test_show_multiline() {
	test_create
	$sn post "Multiline
message with several
lines"
	id="$($sn log | grep -o '#[0-9a-z]*')"
	# trick: remove # using parameter expansion
	output="$($sn show "${id###}")"
	echo "$output" | grep '^Multiline'
	assert_status 0 $?
	echo "$output" | grep '^message with several'
	assert_status 0 $?
	echo "$output" | grep '^lines'
	assert_status 0 $?
}

###########
# sn like #
###########

test_like() {
	test_log_multiple_users
	# save last message id
	message_id="$($sn log | tail +10 | grep -o '#[0-9a-z]*')"
	message_id="${message_id###}"
	$sn like "$message_id"
	grep "^\"$message_id" "$YADSN_DATA/$network/$USER/$(likes_file)"
	assert_status 0 $?
}

test_like_duplicate() {
	test_create
	$sn post "One message"
	message_id="$($sn log | grep -o '#[0-9a-z]*')"
	message_id="${message_id###}"
	$sn like "$message_id"
	assert_status 0 $?
	$sn like "$message_id" 2>&1 | head -1 | assert_output "\
Error: You already liked this message!
"
}

test_like_in_other_commands() {
	test_create
	$sn post "One message"
	message_id="$($sn log | grep -o '#[0-9a-z]*')"
	message_id="${message_id###}"
	$sn log | grep '❤️0'
	assert_status 0 $?
	$sn show "$message_id" | grep '❤️0'
	assert_status 0 $?
	$sn like "$message_id"
	assert_status 0 $?
	$sn log | grep '❤️1'
	assert_status 0 $?
	$sn show "$message_id" | grep '❤️1'
	assert_status 0 $?
}

export TS_COLOR="true"
#export TS_DEBUG="true"

. tests/ts
