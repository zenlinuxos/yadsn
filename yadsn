#!/bin/sh

# Copyright (C) 2020 David Alfonso
#
# This file is part of yadsn.
#
# yadsn is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# yadsn is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with yadsn.  If not, see <https://www.gnu.org/licenses/>.

set -eu

CMDNAME=${0##*/}

main() {
	command -v git >/dev/null 2>&1 \
		|| die "Git must be installed to use this program"

	# shellcheck disable=2015
	[ $# -ge 1 ] && [ "$1" != "--help" ] || usage

	[ -d "${YADSN_DATA:=$HOME/.sn}" ] || mkdir -p "${YADSN_DATA}" \
		|| die "Creating sn data directory"

	[ -f "$(config_file)" ] || touch "$(config_file)" \
		|| die "Creating config file"

	network=
	username=
	while getopts n:u:h option ; do
		case $option in
			n) network="$OPTARG" ;;
			u) username="$OPTARG" ;;
			h) usage ;;
			?) usage ;;
		esac
	done
	shift $((OPTIND - 1))

	[ $# -ge 1 ] || usage

	network="${network:=$(get_default_network)}"
	username="${username:=$(get_config "$network" username)}"

	if [ -n "$network" ]; then
		cd "$(network_dir "$network")" 2>/dev/null \
			|| die "Unable to change into network directory"
	fi

	cmd=$1
	shift

	trap clean EXIT INT

	case $cmd in
		create)
			[ -n "${1:-}" ] || die "Missing name of new network"
			[ "$#" -eq 1 ] || die "Too many arguments"
			network="$1"
			username="${username:-$USER}"
			cmd_create
		;;

		join)
			[ -n "${1:-}" ] || die "Missing required Git URL"
			[ "$#" -gt 2 ] && die "Too many arguments"
			network_url="$1"
			# remove until the first / (included) and the .git suffix (if present)
			network="${2:-$(echo "${network_url##*/}" | sed 's/\.git$//')}"
			username="${username:-$USER}"
			cmd_join
		;;

		post)
			[ -n "$network" ] || die "No default network defined in config"
			[ -n "$username" ]|| die "Unknown username to use in '$network'"
			cmd_post "$@"
		;;

		log|members|push|pull)
			[ -n "$network" ] || die "No default network defined in config"
			[ "$#" -eq 0 ] || die "Too many arguments"
			"cmd_$cmd"
		;;

		networks)
			[ "$#" -eq 0 ] || die "Too many arguments"
			cmd_networks
		;;

		show|like)
			[ -n "$network" ] || die "No default network defined in config"
			user_msg_id="${1:-}"
			[ -n "$user_msg_id" ] \
				|| { die "No message id provided" ; }
			"cmd_$cmd" "$@"
		;;

		*)
			die "Invalid command"
		;;
	esac
}

usage() {
	cat <<EOF
Usage: $CMDNAME [global-options] <command>

Global options

	-n network-name: If not provided, and there is only one network in the
		data directory, this is automatically selected. If there is more than
		one, the variable 'default_network' from the config file is used.

	-u username: The username to use when executing the command. If none is
		provided, the variable '<network-name>_username' from the config file is
		used (see -n for how <network-name> is selected).

Commands

	create <network-name>
		Create a new local network. -n does not apply, but -u can be used to
		define what username to use by default in that network.

	join <git-url> [<network-name>]
		Joins a remote network identified by a Git URL. If <network-name> is
		provided, it will be usually to identify the network locally.
		Otherwise, the network name is deduced from the URL.

	push
		Push locally made changes to the remote Git repository. This command
		is only valid if the network was created using the 'join' command.

	pull
		Pull remote changes into local network repository. It tries to rebase
		your changes on top of any other change in the remote repository. It
		fails in case of conflict.

	networks
		Shows a list of networks in your local data directory.

	members
		Shows a list of users in the network.

	log
		Show posts, most recent first. Only the first line of each message is
		shown, with an ellipsis representing messages with more than one line.

	post [<message>]
		Post a message in a network. No quotation necessary. If no text is
		provided the default editor is used to input the message.

	show <message-id>
		Shows a message along all its associated information. The message id
		can be obtained with the 'log' command.

	like <message-id>
		Like a message. The message id can be obtained with the 'log' command.
EOF
	exit 1
}

############################################################################
# commands

cmd_create() {
	[ -d "$(network_dir "$network")" ] \
		&& die "A network named '$network' already exists"
	mkdir -p "$(network_dir "$network")" || die "Creating network directory"
	cd "$(network_dir "$network")" \
		|| die "Unable to change into network directory"
	git init -q
	add_user
	echo "Created network '$network'. Joined as '$username'."
}

cmd_join() {
	[ -d "$(network_dir "$network")" ] \
		&& die "A network named '$network' already exists"
	git clone "$network_url" "$(network_dir "$network")" \
		|| die "Cloning remote Git repository"
	cd "$(network_dir "$network")" \
		|| die "Unable to change into network directory"
	add_user
	echo "Joined network '$network' as user '$username'."
}

cmd_push() {
	[ -n "$(git remote)" ] || die "Can't push local-only network"
	# we are conservative here and don't reset any local changes in the
	# local Git repository of the network
	[ -z "$(git status -s)" ] || die "Network directory has unknown changes!"
	git push --dry-run 2>/dev/null 1>&2 \
		|| die "Can't push local changes, try 'pull' first"
	git push
	echo "Pushed local network changes to remote"
}

cmd_pull() {
	[ -n "$(git remote)" ] || die "Can't pull local-only network"
	# we are conservative here and don't reset any local changes in the
	# local Git repository of the network
	[ -z "$(git status -s)" ] || die "Network directory has unknown changes!"
	git pull --rebase
	echo "Pulled changes from remote"
}

cmd_members() {
	get_users | sed 's/.*/@&/'
}

cmd_networks() {
	# pre: network can be "" if there is no default network
	for net in $(get_network_paths); do
		cd "$net"
		messages="$(pluralize "$(get_network_messages)" "message" "messages")"
		users="$(pluralize "$(get_users | wc -l)" "user" "users")"
		remote="$(get_network_remote)"
		if [ -z "$remote" ]; then remote="no remote"; fi
		default=""
		if [ "${net##*/}" = "$network" ]; then default=" (default)"; fi
		printf "%s [%s] [%s] [%s]%s\n" "${net##*/}" \
			"$users" "$messages" "$remote" "$default"
	done
}

cmd_post() {
	message="$*"
	if [ -z "$message" ]; then
		umask 077
		tmpfile=$(mktemp)
		[ -n "$tmpfile" ] && $(editor) "$tmpfile"
		message=$(cat "$tmpfile")
		rm -f "$tmpfile"
	fi
	[ -n "$message" ] || die "Can't post empty message"
	[ -d "$username" ] || add_user
	add_message "$(posts_file)" "$message"
	echo "Posted message to '$network' with user '$username'"
}

cmd_log() {
	# using git blame allows to show always the latest version of a post, and
	# don't show deleted posts. This would be really complex and inefficient
	# using git log.
	local_format="$(get_time_format)"
	for user in $(get_users) ; do
		# '--date unix' prints unix time in UTC
		entry=$(git blame --date unix "$user/$(posts_file)" \
			| sed -E 's/^([0-9a-z]+) \(.* ([0-9]+) [0-9 ]+\) "(.*)"$/\2\t'"$user"'\t\1\t\3/')
		entry=$(text_shorten "$entry")
		printf "%s\n" "$entry"
	# sort by unix time, and then format the output
	done | sort -rn \
	| while read -r line ; do
		[ -z "$line" ] && continue
		msg_id="$(echo "$line" | cut -f3)"
		printf "[%s | #%s | ❤️%s] @%s: %s\n" \
			"$(echo "$line" | cut -f1 | \
				sed 's/.*/@&/' | xargs -n1 date +"$local_format" -d)" \
			"$(echo "$line" | cut -f3)" \
			"$(get_likes "$msg_id")" \
			"$(echo "$line" | cut -f2)" \
			"$(echo "$line" | cut -f4-)"
	done
	unset local_format
}

cmd_show() {
	# trick: don't use $() to be able to access function msg_* variables here
	get_message_data >/dev/null
	printf "[%s | %s] by @%s (❤️%s)\n\n" \
		"$(date +"$(get_time_format)" -d @"$msg_date")" \
		"#$msg_short_id" \
		"$msg_user" \
		"$(get_likes "$msg_full_id")"
	printf "%s\n" "$(text_import "$msg_text")"
}

cmd_like() {
	get_message_data >/dev/null
	grep -q "$msg_full_id" "$username/$(likes_file)" 2>/dev/null \
		&& die "You already liked this message!" "no"
	add_message "$(likes_file)" "$msg_full_id"
	echo "Liked message from '$msg_user' in network '$network'"
}

############################################################################
# data directory access

add_user() {
	# pre: working directory is a valid network with a git repository
	# pre: $username contains the user name to use
	mkdir "$username" || die "Creating user directory"
	file_create "$username/$(posts_file)"
	git add "$username" >/dev/null
	git_commit "User '$username' joined"
	# add as default user only if it's the first user added
	# locally. For example, currently it's allowed to post as any
	# user or you could change the value in the config file.
	if ! grep "^${network}_username=" "$(config_file)" ; then
		echo "${network}_username=$username" >> "$(config_file)"
	fi
}

add_message() {
	# pre: working directory is a valid network with a git repository
	file=$1
	shift
	file_append "$username/$file" "$@"
	git add "$username" >/dev/null
	git_commit "User '$username' added ${file##*/}"
}

get_likes() {
	find . -type f \( ! -path '*.git*' \
		-a -name "$(likes_file)" \) -print0 \
		| xargs -0 grep "^\"$1" \
		| wc -l
}

git_commit() {
	commit_msg=$1
	# allow date forging for testing purposes
	commit_date=${SN_TEST_NOW:-}
	[ -n "$commit_date" ] && commit_date="--date $commit_date"
	# shellcheck disable=2086
	git commit -q -m "$commit_msg" $commit_date
}

get_message_data() {
	# trick: use '|| true' to avoid exiting if error due to 'set -e'
	msg_out="$(git show --date unix "$user_msg_id" 2>/dev/null || true)"
	[ -n "$msg_out" ] || die "Invalid message id"
	# get full SHA-1 hash from the one the user provided
	msg_full_id="$(git rev-parse "$user_msg_id")"
	msg_short_id="$(git rev-parse --short "$user_msg_id")"
	msg_date="$(echo "$msg_out" | \
		sed -nE 's/^Date:\s+([0-9]+)/\1/p')"
	msg_user="$(echo "$msg_out" | \
		sed -nE 's/^diff.*\/(.+)\/'"$(posts_file)"'$/\1/p')"
	msg_text=$(echo "$msg_out" | sed -nE 's/^\+"(.*)"$/\1/p')
}

get_users() {
	# pre: working directory is a valid network with a git repository
	find . -type d ! -path '*.git*' \
				-a ! -path "./*/*" \
	| sed -nE 's/\.\/(.+)/\1/p'
}

get_network_paths() {
	# we don't use -maxdepth because it's not POSIX standard
	find "$(data_dir)" -type d ! -path '*.git*' \
		-a ! -path "$(data_dir)"\
		-a ! -path "$(data_dir)/*/*"
}

get_default_network() {
	default_network=$(get_config default network)
	if [ -n "$default_network" ]; then
		echo "$default_network"
		return
	fi
	networks=$(get_network_paths)
	if [ "$(echo "$networks" | wc -l)" = "1" ]; then
		echo "${networks##*/}"
	else
		echo ""
	fi
}

get_network_messages() {
	# pre: working directory is a valid network with a git repository
	find . -type f -name "$(posts_file)" -exec cat '{}' \; | wc -l
}

get_network_remote() {
	# pre: working directory is a valid network with a git repository
	git remote -v | awk 'NR==1 { print $2 }'
}

get_config() {
	network=$1
	variable=$2
	[ -f "$(config_file)" ] || { echo "" ; return ; }
	while IFS='=' read -r key val ; do
		[ "$key" = "${network}_${variable}" ] && { echo "$val" ; return ; }
	done < "$(config_file)"
	echo ""
}

get_time_format() {
	get_config "default" "time_format" | sed 's/^$/%b %d %R/'
}

############################################################################
# data file access (CSV-like format with one entry per line and tabs)

file_create() {
	touch "$1"
}

file_append() {
	file="$1"
	shift
	line=
	for field in "$@"; do
		line="${line},\"$(text_export "$field")\""
	done
	# Remove first comma character and append to file
	echo "$line" | sed 's/^,//' >> "$file"
}

text_export() {
	# Because we want each record in one line, the standard CSV file
	# format does not fit.
	echo "$1" | sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/<NEWLINE>/g' \
			  | sed 's/"/""/g'
}

text_import() {
	echo "$1" | sed 's/<NEWLINE>/\n/g' \
			  | sed 's/""/"/g'
}

text_shorten() {
	echo "$1" | sed 's/<NEWLINE>.*$/.../g' \
			  | sed 's/""/"/g'
}

############################################################################
# globals

data_dir() {
	echo "$YADSN_DATA"
}

config_file() {
	echo "$(data_dir)/config"
}

posts_file() {
	echo posts
}

likes_file() {
	echo likes
}

network_dir() {
	echo "$(data_dir)/$1"
}

############################################################################
# utils

die() {
	echo "Error: $1" >&2
	[ "${2:-}" = 'no' ] || echo "Try '$CMDNAME --help' for more information." >&2
	exit 1
}

clean() {
	[ -e "${tmpfile:-}" ] && rm -f "$tmpfile" >/dev/null 2>&1
	return 0
}

pluralize() {
	# $1: number
	# $2: singular form
	# $3: plural form
	[ -z "$1" ] || [ "$1" = 0 ] && printf "no %s" "$3" && return
	echo "$1" | awk -v singular="$2" -v plural="$3" '
	{
		if ($1 == 1) print $1 " " singular
		else print $1 " " plural
	}'
}

editor() {
	for editor in "${VISUAL:-}" "${EDITOR:-}" ; do
		if command -v "$editor" >/dev/null 2>&1 ; then
			echo "$editor"
			return
		fi
	done
	echo "vi"
}

# Allow including the script from test, to be able to access some functions
# directly.
if [ "$CMDNAME" = "yadsn" ]; then
	main "$@"
fi
